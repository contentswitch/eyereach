1. Python 的函数参数传递
a = 1
def fun(a):
    a = 2
fun(a)
print a   # 1

a = []
def fun(a):
    a.append(1)
fun(a)
print a # [1]

说明:
string, tuple, 和 number 是不可更改的对象，
而list,dict等则是可以修改的对象

当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.
第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.
而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改

小节:
不可变对象传递为函数参数时候,当函数中修改该对象后,在函数外面访问的时候,对象维持不变
可变对象传递为函数参数时候,当函数中修改该对象后,在函数外面访问的时候,对象被修改

2. Python中的元类(metaclass)
//简介
Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类.
//作用
拦截类的创建
修改类
返回修改之后的类
//主要应用
元类的主要用途是创建API。
一个典型的例子是Django ORM(面向对象映射)
//实例
def make_hook(f):
    """Decorator to turn 'foo' method into '__foo__'"""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(cls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, cls).__new__(cls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print "Would register class %s now." % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print "Would unregister class %s now." % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print "NoneType None"
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__

3. @staticmethod 和@classmethod
def foo(x):
    print "executing foo(%s)" % x

class A(object):
    def foo(self, x):
        print "executing foo(%s, %s)" % (self, x)

    @classmethod
    def class_foo(cls, x):
        print "executing class_foo(%s,%s)" % (cls,x)

    @staticmethod
    def static_foo(x):
        print "executing static_foo(%s)" % x

a = A()

\        实例方法     类方法          静态方法
a = A()  a.foo(x)  a.class_foo(x)  a.static_foo(x)
A        不可用    A.class_foo(x)  A.static_foo(x)

4. class variable vs install variable
在类设计中，经常遇到两种类型的变量：类变量和实例变量。
类变量（class variable）被该类的所有实例可以共享的变量；
如果某个实例修改了该变量，这种变化可以被其他实例看到。
实例变量（object variable, instance variable）属于实例私有；
 对实例变量的操作不会影响到其他实例对象。

举个简单的例子，就很清楚了。
#!/usr/bin/env python

class   Person(object) :
    count_beans = 0

    def __init__(self, name) :
        self.name = name
        self.count_beans = 0

    def pick(self) :
        self.count_beans += 1
        Person.count_beans += 1     #self.__class__.count_beans += 1

        print '%s pick a bean. He picked %d beans, and we all picked %d beans.' % (self.name, self.count_beans, Person.count_beans)

alex = Person('Alex')
alex.pick()

mike = Person('Mike')
mike.pick()
alex.pick()

jack = Person('Jack')
jack.pick()
alex.pick()
mike.pick()

运行结果：
Alex pick a bean. He picked 1 beans, and we all picked 1 beans.
Mike pick a bean. He picked 1 beans, and we all picked 2 beans.
Alex pick a bean. He picked 2 beans, and we all picked 3 beans.
Jack pick a bean. He picked 1 beans, and we all picked 4 beans.
Alex pick a bean. He picked 3 beans, and we all picked 5 beans.
Mike pick a bean. He picked 2 beans, and we all picked 6 beans.

5. Python自省函数getattr(),setattr(),delattr(),hasattr() 
自省: 自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.
简单一句就是运行时能够获得对象的类型
class A:
    def __init__(self):
        self.name = 'zhangjing'
    def method(self):
        print "method print"
In [20]: a = A()

In [21]: getattr(a, 'name', 'not found')
Out[21]: 'zhangjing'

In [22]: hasattr(a, 'name')
Out[22]: True

In [23]: setattr(a, 'name', 'zhangpeng')

In [24]: hasattr(a, 'name')
Out[24]: True

In [25]: delattr(a, 'name')

In [26]: getattr(a, 'name', 'not found')
Out[26]: 'not found'

In [27]: hasattr(a, 'name')
Out[27]: False

6. 字典推导式
L = [1,2,3,4,5,6,7,8,9]

要生成下面这样的字典：
{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: 70, 8: 80, 9: 90}

以前需要这样：
dict([(v, v*10) for v in L])

现在可以直接这样：(字典推导式)
{v: v*10 for v in L}

附录：
//什么是字典？
字典是Python语言中唯一的映射类型。
映射类型对象里哈希值（键，key）和指向的对象（值，value）是一对多的的关系，通常被认为是可变的哈希表。
字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也可包括其他容器类型。

字典类型与序列类型的区别：
存取和访问数据的方式不同。
序列类型只用数字类型的键（从序列的开始按数值顺序索引）；
映射类型可以用其他对象类型作键（如：数字、字符串、元祖，一般用字符串作键），和序列类型的键不同，
映射类型的键直接或间接地和存储数据值相关联。
映射类型中的数据是无序排列的。这和序列类型是不一样的，序列类型是以数值序排列的。
映射类型用键直接“映射”到值。

字典是Python中最强大的数据类型之一。

//如何创建字典和给字典赋值
简单地说字典就是用大括号包裹的键值对的集合。（键值对也被称作项）
一般形式：
adict = {}
adict = {key1：value2， key2：value2， …}
或用dict()函数，如，adict = dict() 或 adict = dict（（['x',1],['y',2]））这样写对吗？adict = dict（['x',1],['y',2]）。关键字参数创建字典，如：adict= dict(name=’allen’,age=’40′)
或用fromkeys()方法，如，adict = {}.fromkeys((‘x’,'y’), -1) 这样创建的字典的value是一样的，若不给值，默认为None。
特点：
z1、键与值用冒号“：”分开；
z2、项与项用逗号“，”分开；
z3、字典中的键必须是唯一的，而值可以不唯一。
adict = {‘name’:'allen’, ‘name’:'lucy’, ‘age’:’40′} 与 bdict = {‘name’:'allen’, ‘name2′:’allen’, ‘age’:’40′}
注意：如果字典中的值为数字，最好使用字符串数字形式，如：’age’:’040′ 而不用 ‘age’:040

//字典的基本操作
z1、如何访问字典中的值？
adict[key] 形式返回键key对应的值value，如果key不在字典中会引发一个KeyError。
z2、如何检查key是否在字典中？
a、has_key()方法 形如：adict.haskey(‘name’) 有–>True，无–>False
b、in 、not in   形如：’name’ in adict      有–>True，无–>False
z3、如何更新字典？
a、添加一个数据项（新元素）或键值对
adict[new_key] = value 形式添加一个项
b、更新一个数据项（元素）或键值对
adict[old_key] = new_value
c、删除一个数据项（元素）或键值对
del adict[key] 删除键key的项 / del adict 删除整个字典
adict.pop(key) 删除键key的项并返回key对应的 value值

//映射类型操作符
标准类型操作符（+，-，*，<,>,<=,>=,==,!=,and,or, not)
a、字典不支持拼接和重复操作符（+，*）
b、字典的比较操作
先比较字典的长度也就是字典的元素个数
键比较
值比较
例子：
adict = {}
bdict = {‘name’:'allen’, ‘age’:’40′}
cmp(adict, bdict)  < –>-1 or > –>1 or ==  –>0

//映射相关的函数
z1、len() 返回字典的长度
z2、hash() 返回对象的哈希值，可以用来判断一个对象能否用来作为字典的键
z3、dict() 工厂函数，用来创建字典

//字典的方法
z1、adict.keys() 返回一个包含字典所有KEY的列表；
z2、adict.values() 返回一个包含字典所有value的列表；
z3、adict.items() 返回一个包含所有（键，值）元祖的列表；
z4、adict.clear() 删除字典中的所有项或元素；
z5、adict.copy() 返回一个字典浅拷贝的副本；
z6、adict.fromkeys(seq, val=None) 创建并返回一个新字典，以seq中的元素做该字典的键，val做该字典中所有键对应的初始值（默认为None）；
z7、adict.get(key, default = None) 返回字典中key对应的值，若key不存在字典中，则返回default的值（default默认为None）；
z8、adict.has_key(key) 如果key在字典中，返回True，否则返回False。 现在用 in 、 not in；
z9、adict.iteritems()、adict.iterkeys()、adict.itervalues() 与它们对应的非迭代方法一样，不同的是它们返回一个迭代子，而不是一个列表；
z10、adict.pop(key[,default]) 和get方法相似。如果字典中存在key，删除并返回key对应的vuale；如果key不存在，且没有给出default的值，则引发keyerror异常；
z11、adict.setdefault(key, default=None) 和set()方法相似，但如果字典中不存在Key键，由 adict[key] = default 为它赋值；
z12、adict.update(bdict) 将字典bdict的键值对添加到字典adict中。

//字典的遍历
z1、遍历字典的key（键）
for key in adict.keys():print key
z2、遍历字典的value（值）
for value in adict.values(): print value
z3、遍历字典的项（元素）
for item in adict.items():print item
z4、遍历字典的key-value
for item，value in adict.items(): print ‘key=%s, value=%s’ %(item, value)  或   for item，value in adict.iteritems(): print ‘key=%s, value=%s’ %(item, value)
注意：for item,value in adict.items(): print ‘key=%s’, ‘value=%s’, %(item, value) 这种写法是错误的

//使用字典的注意事项
z1、不能允许一键对应多个值；
z2、键必须是可哈希的。

7. Python 中单下划线和双下划线
__foo__:一种约定,Python 内部的名字,用来区别其他用户自定义的命名,以防冲突. 
_foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.
__foo:这个有真正的意义:解析器用_classname__foo 来代替这个名字,以区别和其
他类相同的命名.
class MyClass:
    def __init__(self):
        self.__superprivate = "Hello"
        self._semiprivate = ", world!"

In [18]: mc = MyClass()

In [19]: print mc._semiprivate
, world!

In [20]: print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}

In [21]: print mc._MyClass__superprivate
Hello

8. % operator vs format
//basic usage
sub1 = "python string!"
sub2 = "an arg"

a = "i am a %s" % sub1
b = "i am a {0}".format(sub1)

c = "with %(kwarg)s!" % {'kwarg':sub2}
d = "with {kwarg}!".format(kwarg=sub2)

print a    # "i am a python string!"
print b    # "i am a python string!"
print c    # "with an arg!"
print d    # "with an arg!"

//format advantage
#multi elements
name = (1,2,3)
"hi there %s" % name
yet, if name happens to be (1, 2, 3), it will throw a TypeError. 
"hi there {0}".format(name)
Results:
'hi there (1, 2, 3)'
# get any part of elements
tu = (12,45,22222,103,6)
print '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*tu)
Results:
12 22222 45 22222 103 22222 6 22222
# format is as a function
li = [12,45,78,784,2,69,1254,4785,984]
print map('the number is {}'.format,li)   
print
Results:
['the number is 12', 'the number is 45', 'the number is 78', 'the number is 784'
, 'the number is 2', 'the number is 69', 'the number is 1254', 'the number is 47
85', 'the number is 984']

from datetime import datetime,timedelta
once_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)
delta = timedelta(days=13, hours=8,  minutes=20)
gen =(once_upon_a_time +x*delta for x in xrange(20))

print '\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))
Results:
2010-07-01 12:00:00
2010-07-14 20:20:00
2010-07-28 04:40:00
2010-08-10 13:00:00
2010-08-23 21:20:00
2010-09-06 05:40:00
2010-09-19 14:00:00
2010-10-02 22:20:00
2010-10-16 06:40:00
2010-10-29 15:00:00
2010-11-11 23:20:00
2010-11-25 07:40:00
2010-12-08 16:00:00
2010-12-22 00:20:00
2011-01-04 08:40:00
2011-01-17 17:00:00
2011-01-31 01:20:00
2011-02-13 09:40:00
2011-02-26 18:00:00
2011-03-12 02:20:00
# print element of class
class A(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

a = A(2,3)
'x is {0.x}, y is {0.y}'.format(a)
Out[14]: 'x is 2, y is 3'
Or, as a keyword argument:
'x is {a.x}, y is {a.y}'.format(a=a)
Out[15]: 'x is 2, y is 3'

//non-ascii
; s='й'
; u=u'й'
; s
'\xd0\xb9'
; u
u'\u0439'
s is just a string (called 'byte array' in Python3) and u is a Unicode string (called 'string' in Python3):

; '%s' % s
'\xd0\xb9'
; '%s' % u
u'\u0439'
When you give a Unicode object as a parameter to % operator it will produce a Unicode string even if the original string wasn't Unicode:

; '{}'.format(s)
'\xd0\xb9'
; '{}'.format(u)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'latin-1' codec can't encode character u'\u0439' in position 0: ordinal not in range(256)
but the .format function will raise "UnicodeEncodeError":

; u'{}'.format(s)
u'\xd0\xb9'
; u'{}'.format(u)
u'\u0439'
and it will work with a Unicode argument fine only if the original string was Unicode.

9. iterables, generator, yield, itertools

//Iterables
Iteration is a process implying iterables (implementing the __iter__() method) and iterators 
(implementing the __next__() method). Iterables are any objects you can get an iterator from. 
Iterators are objects that let you iterate on iterables.

When you create a list, you can read its items one by one. Reading its items one by one is called iteration:

>>> mylist = [1, 2, 3]
>>> for i in mylist:
...    print(i)
1
2
3
mylist is an iterable. When you use a list comprehension, you create a list, and so an iterable:

>>> mylist = [x*x for x in range(3)]
>>> for i in mylist:
...    print(i)
0
1
4
Everything you can use "for... in..." on is an iterable; lists, strings, files...

These iterables are handy because you can read them as much as you wish, but you store all the values 
in memory and this is not always what you want when you have a lot of values.

//Generators
Generators are iterators, but you can only iterate over them once. It's because they do 
not store all the values in memory, they generate the values on the fly:

>>> mygenerator = (x*x for x in range(3))
>>> for i in mygenerator:
...    print(i)
0
1
4
It is just the same except you used () instead of []. BUT, you cannot perform for i in mygenerator a 
second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.

//Yield
Yield is a keyword that is used like return, except the function will return a generator.

>>> def createGenerator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
>>> mygenerator = createGenerator() # create a generator
>>> print(mygenerator) # mygenerator is an object!
<generator object createGenerator at 0xb7555c34>
>>> for i in mygenerator:
...     print(i)
0
1
4

//Itertools

The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?
 Chain two generators? Group values in a nested list with a one liner? Map / Zip without creating another list?

Then just import itertools.

An example? Let's see the possible orders of arrival for a 4 horse race:

>>> horses = [1, 2, 3, 4]
>>> races = itertools.permutations(horses)
>>> print(races)
<itertools.permutations object at 0xb754f1dc>
>>> print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]

10, *args vs **kwargs
//any number of arguments
def print_everything(*args):
    for count, thing in enumerate(args):
        print '{0}. {1}'.format(count, thing)

print_everything('apple', 'banana', 'cabbage')
Result:
0. apple
1. banana
2. cabbage

//any number of named arguments
def table_things(**kwargs):     
     for name, value in kwargs.items():         
         print '{0} = {1}'.format(name, value)

table_things(apple = 'fruit', cabbage = 'vegetable')
Result:
cabbage = vegetable
apple = fruit

You can use these along with named arguments too. The explicit arguments get values first and then everything else is passed to *args and **kwargs. The named arguments come first in the list. For example:

//any number of un-named arguments and named arguments
def arg_with_kwargs(*args, **kwargs):
    for count, thing in enumerate(args):
        print '{0}. {1}'.format(count, thing)

    for name, value in kwargs.items(): 
        print '{0} = {1}'.format(name, value)

argList = ['apple', 'banana', 'cabbage']
kwargList = {"apple":"fruit", "cabbage":"vegetable"}
arg_with_kwargs(*argList, **kwargList)
Result:
0. apple
1. banana
2. cabbage
cabbage = vegetable
apple = fruit

11. 修饰器
a. 简单的修饰器
def hello(fn):
    def wrapper():
        print "Hello, %s" % fn.__name__
        fn()
        print "Goodbye, %s" % fn.__name__

    return wrapper

@hello
def foo():
    print "I am foo"

foo()

Result:
Hello, foo
I am foo
Goodbye, foo

Explain:
@hello修饰符等同foo = hello(foo)

b. 多个修饰器
@decorator_one
@decorator_two
def func():
    pass

等同于:
func = decorator_one(decorator_two(func))

c. 带参数修饰器
@decorator(arg1, arg2)
def func():
pass

等同于:
func = decorator(arg1,arg2)(func)

eg.
def makeHtmlTag(tag, *args, **kwds):
    def real_decorator(fn):
        css_class = " class='{0}'".format(kwds["css_class"]) \
                     if "css_class" in kwds else ""
        def wrapped(*args, **kwds):
            return "<"+tag+css_class+">" + fn(*args, **kwds) + "</"+tag+">"
        return wrapped
    return real_decorator

@makeHtmlTag(tag="b", css_class="bold_css")
@makeHtmlTag(tag="i", css_class="italic_css")
def hello():
    return "hello world"

print hello()

等同于:
hello = makeHtmlTag(arg1, arg2)(hello) 

结果:
<b class='bold_css'><i class='italic_css'>hello world</i></b>

d. 类方式的修饰器
egA:
class MyDecorator:
    def __init__(self, fn):
        print "inside MyDecorator.__init__()"
        self.fn = fn

    def __call__(self):
        self.fn()
        print "inside MyDecorator.__call__()"

@MyDecorator
def aFunction():
    print "inside aFunction()"

print "Finished decorating aFunction()"

aFunction()

结果:
inside MyDecorator.__init__()
Finished decorating aFunction()
inside aFunction()
inside MyDecorator.__call__()

说明:
1）一个是__init__()，这个方法是在我们给某个函数decorator时被调用，
所以，需要有一个fn的参数，也就是被decorator的函数。
2）一个是__call__()，这个方法是在我们调用被decorator函数时被调用的。

egB:
class MakeHtmlTag:
    def __init__(self, tag, css_class=""):
        self._tag = tag
        self._css_class = " class='{0}'".format(css_class) \
                if css_class != "" else ""

    def __call__(self, fn):
        def wrapped(*args, **kwargs):
            return "<" + self._tag + self._css_class+">" \
                     + fn(*args, **kwargs) + "</" + self._tag + ">"
        return wrapped

@MakeHtmlTag(tag="b", css_class="bold_css")
@MakeHtmlTag(tag="i", css_class="italic_css")
def hello(name):
    return "Hello, {}".format(name)

print hello("Hao Chen")

结果:
<b class='bold_css'><i class='italic_css'>Hello, Hao Chen</i></b>

e. 使用修生气设置函数的调用参数
//通过 **kwargs，这种方法decorator会在kwargs中注入参数。
def decorate_A(function):
    def wrap_function(*args, **kwargs):
        kwargs['str'] = 'Hello!'
        return function(*args, **kwargs)
    return wrap_function

@decorate_A
def print_message_A(*args, **kwargs):
    print(kwargs['str'])

print_message_A()

//约定好参数，直接修改参数
def decorate_B(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        return function(str, *args, **kwargs)
    return wrap_function

@decorate_B
def print_message_B(str, *args, **kwargs):
    print(str)

print_message_B()

//通过 *args 注入
def decorate_C(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        #args.insert(1, str)
        args = args +(str,)
        return function(*args, **kwargs)
    return wrap_function

class Printer:
    @decorate_C
    def print_message(self, str, *args, **kwargs):
        print(str)

p = Printer()
p.print_message()

结果:
Hello!

f. 修饰器的副作用
def hello(fn):
    def wrapper():
        print "hello, %s" % fn.__name__
        fn()
        print "goodby, %s" % fn.__name__
    return wrapper

@hello
def foo():
    '''foo help doc'''
    print "i am foo"
    pass

foo()
print foo.__name__  #这里输出的是wrapper, 实际上应该是foo

解决方法:
from functools import wraps
def hello(fn):
    @wraps(fn)
    def wrapper():
        print "hello, %s" % fn.__name__
        fn()
        print "goodby, %s" % fn.__name__
    return wrapper
 
@hello
def foo():
    '''foo help doc'''
    print "i am foo"
    pass
 
foo()
print foo.__name__ #这里输出的是foo

g. 修饰器实例
//给函数调用做缓存
from functools import wraps
def memo(fn):
    cache = {}
    miss = object()
 
    @wraps(fn)
    def wrapper(*args):
        result = cache.get(args, miss)
        if result is miss:
            result = fn(*args)
            cache[args] = result
        return result
 
    return wrapper
 
@memo
def fib(n):
    if n < 2:
        return n
    return fib(n - 1) + fib(n - 2)

上面这个例子中，是一个斐波拉契数例的递归算法。我们知道，这个递归是相当没有效率的，因为会重复调用。比如：我们要计算fib(5)，于是其分解成fib(4) + fib(3)，而fib(4)分解成fib(3)+fib(2)，fib(3)又分解成fib(2)+fib(1)…… 你可看到，基本上来说，fib(3), fib(2), fib(1)在整个递归过程中被调用了两次。

而我们用decorator，在调用函数前查询一下缓存，如果没有才调用了，有了就从缓存中返回值。一下子，这个递归从二叉树式的递归成了线性的递归。

//Profiler
import cProfile, pstats, StringIO
 
def profiler(func):
    def wrapper(*args, **kwargs):
        datafn = func.__name__ + ".profile" # Name the data file
        prof = cProfile.Profile()
        retval = prof.runcall(func, *args, **kwargs)
        #prof.dump_stats(datafn)
        s = StringIO.StringIO()
        sortby = 'cumulative'
        ps = pstats.Stats(prof, stream=s).sort_stats(sortby)
        ps.print_stats()
        print s.getvalue()
        return retval
 
    return wrapper

//注册回调函数
class MyApp():
    def __init__(self):
        self.func_map = {}
 
    def register(self, name):
        def func_wrapper(func):
            self.func_map[name] = func
            return func
        return func_wrapper
 
    def call_method(self, name=None):
        func = self.func_map.get(name, None)
        if func is None:
            raise Exception("No function registered against - " + str(name))
        return func()
 
app = MyApp()
 
@app.register('/')
def main_page_func():
    return "This is the main page."
 
@app.register('/next_page')
def next_page_func():
    return "This is the next page."
 
print app.call_method('/')
print app.call_method('/next_page')

上面这个示例中，用类的实例来做decorator。
decorator类中没有__call__()，但是wrapper返回了原函数。所以，原函数没有发生任何变化。

//给函数打日志
import inspect
 
def advance_logger(loglevel):
 
    def get_line_number():
        return inspect.currentframe().f_back.f_back.f_lineno
 
    def _basic_log(fn, result, *args, **kwargs):
        print "function   = " + fn.__name__,
        print "    arguments = {0} {1}".format(args, kwargs)
        print "    return    = {0}".format(result)
 
    def info_log_decorator(fn):
        @wraps(fn)
        def wrapper(*args, **kwargs):
            result = fn(*args, **kwargs)
            _basic_log(fn, result, args, kwargs)
        return wrapper
 
    def debug_log_decorator(fn):
        @wraps(fn)
        def wrapper(*args, **kwargs):
            ts = time.time()
            result = fn(*args, **kwargs)
            te = time.time()
            _basic_log(fn, result, args, kwargs)
            print "    time      = %.6f sec" % (te-ts)
            print "    called_from_line : " + str(get_line_number())
        return wrapper
 
    if loglevel is "debug":
        return debug_log_decorator
    else:
        return info_log_decorator
你可以看到两点，
1）我们分了两个log level，一个是info的，一个是debug的，然后我们在外尾根据不同的参数返回不同的decorator。
2）我们把info和debug中的相同的代码抽到了一个叫_basic_log的函数里，DRY原则。

12. 鸭子类型
鸭子类型是动态语言的一种设计风格。
提到鸭子类型就不得不提它的名称由来：如果像鸭子一样走路，像鸭子一样呱呱叫，那它就是一只鸭子。
鸭子类型本质体现的是面向接口的编程。相比之下，传统的静态OO语言如java等的多态思想，体现的是面向继承的编程。
简单来说，动态语言因为运行前不需要确定变量类型，故对对象的方法调用，只要对象拥有这一名称的方法，就一定能调用成功。

class A:
    def say(self):
	print "Called as A's instance"

class B:
    def say(self):
	print "Called as B's instance"

def process(obj):
    obj.say()

a = A()
b = B()
process(a)
process(b)
这个例子里我们看到，process处理函数要求接受到的参数对象具有一个say方法，
则 a 和 b 都具有这个方法，它们都被视作合法的输入，而不关心它们具体是什么类型。
而在静态语言里，必须指明参数obj的类型。即使使用多态的思想，合法的输入参数也至少
要是指明的obj类型的子类型，其他的类型就算实现了 say 方法，
也是无法调用的。使用反射可以做到类似的实现，但是相对欠灵活。

13. 浅谈python重载
python 的重载主要包括方法重载和运算符重载。

//python 方法重载： 其他的语言一般对于方法重载的话，主要是根据参数的类型不同或者是数量不同来区分同名的方法。
而python则比较特殊，它本身是动态语言，方法的参数是没有类型的，当调用传值的时候才确定参数的类型，
故对参数类型不同的方法无需考虑重载。对参数数量不同的方法，则（大多数情况下）可以采用参数默认值来实现。

比如你可以定义函数的默认值：

def info(x,y,z=1):

     pass

//python 运算符重载： 在C#中，我们通过使用关键字operator定义一个运算符方法，
并定义与所在类相关的运算符行为。在 Python中，运算符重载的方式更为简单——每一个类都默认
内置了所有可能的运算符方法，只要重写这个方法，就可以实现针对该运算符的重载。例如以下是重载加法操作：

class Info(object):
    def __init__(self):
        self.a = 11
        self.b = 22
    def __add__(self,x):
        return self.a * self.b


a = Info()
b = Info()
print a + b

14. Python新式类 vs 旧类
区别:
  MRO (Method Resolution Order)
新式类: 广度优先
旧式类: 深度优先

15 __new__和__init__的区别
__new__确实很少见到,先做了解吧. 
a. __new__是一个静态方法,而__init__是一个实例方法.
b.  __new__方法会返回一个创建的实例,而__init__什么都不返回.
c.  只有在__new__返回一个 cls 的实例时后面的__init__才能被调用.
d.  当创建一个新实例时调用__new__,初始化一个实例时用__init__.
e: __metaclass__是创建类时起作用.所以我们可以分别使用__metaclass__,
   __new__和__init__来分别在类创建,实例创建和实例初始化的时候做一些小手脚
